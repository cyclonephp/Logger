The logger module is a very simple logging utility. In short,
 it enables you to
<ul>
 <li>add log entries at four log levels</li>
 <li> write your log entries to different outputs</li>
 <li>define different log writers (adapters) for different namespaces</li>
 <li> define multiple log adapters for the same namespace</li>
 <li> turn off logging with an "empty" log adapter</li>
</ul>

@section logger-config Configuration

The logger is configured in the <code>logger.*</code> configuration namespace.
If you use the default configuration reader, you have to edit the
<code>config/logger.php</code> configuration file. In this file the important
 keys are:
<ul>
 <li><code>log_level</code>: it's value can be one of the followings:
<ul>
 <li><code>Log::DEBUG</code></li>
 <li><code>Log::INFO</code></li>
 <li><code>Log::WARNING</code></li>
 <li><code>Log::ERROR</code></li>
</ul>

Only those log entries will be written to the output which' log level
is greater or equal to the current log level of the system. For example
if the current log level (defined in this config key) is <code>Log::INFO</code>
then the <code>Log::DEBUG</code> messages will be dropped by the adapters.</li>
<li><code>adapters</code>: this is a key-value pair where the keys are "namespaces"
 (qualified class name prefixes) and the values are objects implementing the 
 @c cyclone\log\LogAdapter interface.
</li>
</ul>

Example <code>config/logger.php</code>:
 @code
 <?php
 
 use cyclone\log\adapter;
 
 return array(
 		'log_level' => Log::INFO,
 		'adapters' => array(
 			'' => new adapter\FileAdapter(APPPATH . 'logs/'),
 			'cyclone\\db' => new adapter\FileAdapter(APPPATH . 'logs/sql/'),
 			'app\\controller' => new adapter\DBAdapter('log', array(
 				'time' => 'created_at',
 				'message' => 'text',
 				'level' => 'level'
 			)),
 			'app\\controller\\AdminController' => adapter\CompositeAdapter::factory()
 				->add(new adapter\FileAdapter(APPPATH . 'logs/admin/'))
 				->add(new adapter\DBAdapter('admin_log', array(
					'time' => 'created_at',
 					'message' => 'text',
 					'level' => 'level'
				)
			))
 		) 
 );
@endcode

The corresponding adapter for a class can be obtained with a 
<code>cyclone\Log::for_class($class)</code> call. When you want to get a log adapter using
<code>cyclone\Log::for_class($class)</code>
 then this factory method checks each namespace as a prefix from the
 adapter list. It checks if the namespace is the prefix of the searched
 classname, and returns the adapter for the longest matching namespace.
 If the <code>$class</code> parameter is an object then the method will search
 for its class name.

In the above example a <code>cyclone\Log::for_class('Srv_Something')</code> will return
 the first @c cyclone\log\adapter\FileAdapter instance, since the longest matching
 namespace is the empty namespace (it should be used as a default adapter,
 since it always matches if no else namespace does).

<em>Note: as you can see, the adapter configuration is done using the
 config module. In this example we simply used a file config reader,
 but you can take the advantage of the flexibility of the config module
 for setting up your log adapters. You can use different adapters in
 different environments, store your adapters in the database, etc.</em>

@section logger-entries Adding log entries
 
 There is a corresponding method for adding log entries for each log levels
 in the @c cyclone\log\LogAdapter interface. These are
 <ul>
 <li><code>add_debug($message, $code = NULL)</code></li>
 <li><code>add_info($message, $code = NULL)</code></li>
 <li><code>add_warning($message, $code = NULL)</code></li>
 <li><code>add_error($message, $code = NULL)</code></li>
 </ul>

Since objects are "converted" into their class names in the 
@c cyclone\Log::for_class($class) method, you will pass <code>$this</code> as the parameter
for @c cyclone\Log::for_class() . So let's see a class that uses the logger:
 
@code
 <?php
 
 namespace app\srv;
 
 use cyclone as cy;
 
 class WhateverService {
  
 private static $_log;
  
 public function __construct() {
 		if (NULL === self::$_log) {
 			self::$_log = cy\Log::for_class($this);
 		}
 }
  
 public function do_something() {
 		// ...
 		self::$_log->add_error('Houston, we have a problem');
 		// ...
 }
  
 }
 @endcode

That's all you should basicly know about the logger module. By default, CyclonePHP
is configured to use a @c Log_Adapter_File instance in the default namespace.
For further documentation about the adapters look at the API docs.
